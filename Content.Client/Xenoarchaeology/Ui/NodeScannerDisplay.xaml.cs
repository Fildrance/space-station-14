using Content.Client.UserInterface.Controls;
using Content.Shared.Xenoarchaeology.Equipment.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Xenoarchaeology.Ui;

[GenerateTypedNameReferences]
public sealed partial class NodeScannerDisplay : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    public NodeScannerDisplay(EntityUid scannerEntityUid)
    {
        RobustXamlLoader.Load(this);

        IoCManager.InjectDependencies(this);

        var scannerComponent = _ent.GetComponent<NodeScannerComponent>(scannerEntityUid);

        Update((scannerEntityUid, scannerComponent));
    }

    public void Update(Entity<NodeScannerComponent> ent)
    {
        var triggeredNodesSnapshot = ent.Comp.TriggeredNodesSnapshot;
        if (triggeredNodesSnapshot.Count == 0)
        {
            NoActiveNodeDataLabel.Visible = true;
            ActiveNodesList.Visible = false;
            ActiveNodesList.Children.Clear();
        }
        else
        {
            NoActiveNodeDataLabel.Visible = false;
            ActiveNodesList.Visible = true;

            ActiveNodesList.Children.Clear();

            foreach (var nodeId in triggeredNodesSnapshot)
            {
                var nodeLabel = new Button
                {
                    Text = nodeId,
                    Margin = new Thickness(15, 5, 0, 0),
                    MaxHeight = 40,
                    Disabled = true
                };
                ActiveNodesList.Children.Add(nodeLabel);
            }
        }

        ArtifactStateLabel.Text = GetState(ent);
        NodeScannerState.Text = ent.Comp.ScannedAt > TimeSpan.Zero
            ? Loc.GetString("node-scanner-artifact-scanned-time", ("time", ent.Comp.ScannedAt.Value.ToString(@"hh\:mm\:ss")))
            : Loc.GetString("node-scanner-artifact-scanned-time-none");
    }

    private string? GetState(Entity<NodeScannerComponent> ent)
    {
        return ent.Comp.ArtifactState switch
        {
            ArtifactState.None => "\u2800", // placeholder for line to not be squeezed
            ArtifactState.Ready => Loc.GetString("node-scanner-artifact-state-ready"),
            ArtifactState.Unlocking => Loc.GetString("node-scanner-artifact-state-unlocking"),
            ArtifactState.Cooldown => Loc.GetString("node-scanner-artifact-state-cooldown")
        };
    }
}
