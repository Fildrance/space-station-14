using Content.Client.Chat.Managers;
using Content.Shared.Chat;
using Content.Shared.Input;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Input.Binding;
using System.Linq;

namespace Content.Client.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class CreateNewCustomBindingPanel : BoxContainer
{
    /// <inheritdoc />
    public CreateNewCustomBindingPanel()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        OptionsDropDown.AddItem("say");
        OptionsDropDown.AddItem("emote");
        OptionsDropDown.AddItem("Run command");
    }

    //private BoundKeyFunction CreateBoundFunction(string action, string command)
    //{
    //    Logger.Info($"Creating function for action '{action}' and command '{command}'");

    //    const string prefixSay = "Say: ";
    //    const string prefixEmote = "Emote: ";
    //    const string prefixRun = "Run Command: ";

    //    ChatSelectChannel channel;

    //    if (action.StartsWith(prefixSay, StringComparison.OrdinalIgnoreCase))
    //    {
    //        channel = ChatSelectChannel.Local;
    //    }
    //    else if (action.StartsWith(prefixEmote, StringComparison.OrdinalIgnoreCase))
    //    {
    //        channel = ChatSelectChannel.Emotes;
    //    }
    //    else if (action.StartsWith(prefixRun, StringComparison.OrdinalIgnoreCase))
    //    {
    //        channel = ChatSelectChannel.Console;
    //    }
    //    else
    //    {
    //        Logger.Warning($"Unknown action type: {action}");
    //        return null!;
    //    }

    //    for (int i = 0; i <= 9; i++)
    //    {
    //        if (_usedCustomCommandSlots.Contains(i))
    //            continue;

    //        // Mark the slot as used
    //        _usedCustomCommandSlots.Add(i);

    //        var function = ContentKeyFunctions.GetCustomCommandKeys()[i];
    //        Logger.Info($"Binding to CustomCommand{i}");

    //        // Store the handler
    //        _customFunctionHandlers[function] = () =>
    //        {
    //            var chatManager = IoCManager.Resolve<IChatManager>();
    //            chatManager.SendMessage(command, channel);
    //        };

    //        _inputManager.SetInputCommand(
    //            function,
    //            InputCmdHandler.FromDelegate(_ => _customFunctionHandlers[function]?.Invoke())
    //        );

    //        return function;
    //    }

    //    Logger.Error("No available custom command slots (0â€“9)");
    //    return null!;
    //}

    //private void AddCustomBinding(BoundKeyFunction function, string keyString)
    //{
    //    if (string.IsNullOrWhiteSpace(keyString))
    //    {
    //        Logger.Warning("Key string is empty or null.");
    //        return;
    //    }

    //    var parts = keyString.Split('+', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    //    var baseKey = Keyboard.Key.Unknown;
    //    var mods = new List<Keyboard.Key>();

    //    foreach (var part in parts)
    //    {
    //        var lower = part.ToLowerInvariant();
    //        if (lower == "ctrl" || lower == "control") mods.Add(Keyboard.Key.Control);
    //        else if (lower == "shift") mods.Add(Keyboard.Key.Shift);
    //        else if (lower == "alt") mods.Add(Keyboard.Key.Alt);
    //        else if (lower == "win" || lower == "system") mods.Add(Keyboard.Key.LSystem);
    //        else if (!Keyboard.Key.TryParse(part, out baseKey))
    //        {
    //            Logger.Warning($"Invalid key or modifier in key string: {keyString}");
    //            return;
    //        }
    //    }

    //    if (baseKey == Keyboard.Key.Unknown)
    //    {
    //        Logger.Warning($"No base key found in key string: {keyString}");
    //        return;
    //    }

    //    var registration = new KeyBindingRegistration
    //    {
    //        Function = function,
    //        BaseKey = baseKey,
    //        Mod1 = mods.ElementAtOrDefault(0),
    //        Mod2 = mods.ElementAtOrDefault(1),
    //        Mod3 = mods.ElementAtOrDefault(2),
    //        Type = KeyBindingType.State,
    //        Priority = 0,
    //        CanFocus = false,
    //        CanRepeat = false
    //    };

    //    _inputManager.RegisterBinding(registration);
    //    _inputManager.SaveToUserData();
    //}
}
